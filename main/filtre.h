#ifndef FILTRE_H
#define FILTRE_H

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DECLARATION DES LIBRAIRIES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include <string.h>

#include "esp_dsp.h"
#include "esp_log.h"
#include "esp_timer.h"
#include "freertos/FreeRTOS.h"
#include "freertos/queue.h"
#include "freertos/task.h"
#include "math.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DECLARATION DES CONSTANTES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
#define BLOCK_SIZE 128                              // Taille du bloc de traitement
#define FILTER_LENGTH 32                            // Longueur du filtre NLMS (à ajuster)
#define MU 0.0025f                                  // Facteur de pas d'apprentissage du filtre (entre 0 et 1)
#define EPSILON 1e-9f                               // Petite constante pour éviter la division par zéro
#define NORMALIZE_FACTOR (1.0f / (float)(1 << 23))  // au lieu de 23
#define COEFF_GAIN 200                              // gain à ajuster pour le gain adaptatif
#define GAIN_MAX 60                                 // gain max pour eviter la saturation
#define COMPTEUR_LED 40                             // periode de reactualisation de la couleur de la LED
#define ALPHA_SNR 0.008                             // parametre pour lissage de la variation de la couleur de la LED
#define ALPHA_GAIN 0.01                             // parametre pour lissage du gain

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// DECLARATION DES VARIABLES GLOBALES
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
extern QueueHandle_t acquisition_to_processing_queue;
extern QueueHandle_t processing_to_output_queue;
extern QueueHandle_t snr_db_queue;

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// PROTOCOLE DES FONCTIONS
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
void processing_task(void *pvParameters);

#endif  // FILTRE_H